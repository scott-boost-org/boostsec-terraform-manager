defaults:
  slack: &defaults_slack
    branch_pattern: main
    channel: dev-circleci
    custom: |
      {"blocks":[{"type":"header","text":{"type":"plain_text","text":":scream: $CIRCLE_PROJECT_REPONAME","emoji":true}},{"type":"section","fields":[{"type":"mrkdwn","text":"*Branch*: $CIRCLE_BRANCH"},{"type":"mrkdwn","text":"*Job*: ${CIRCLE_JOB}"},{"type":"mrkdwn","text":"*Author*: $CIRCLE_USERNAME"}]},{"type":"actions","elements":[{"type":"button","action_id":"basic_fail_view","text":{"type":"plain_text","text":"View Job"},"url":"${CIRCLE_BUILD_URL}"}]}]}
    event: fail
    template: ""

version: 2.1

executors:
  default:
    environment:
      BUILDKIT_PROGRESS: plain
      DOCKER_BUILDKIT: 1

    machine:
      docker_layer_caching: true
      image: ubuntu-2004:2022.10.1

orbs:
  argocd: boostsecurityio/argocd-release@1
  boost-security-scanner: boostsecurityio/scanner@4
  github-util: boostsecurityio/github-util@1
  slack: circleci/slack@4

workflows:
  version: 2
  ci:
    jobs:
      - test:
          context: [aws-build-read, slack-bot]
      - build-push:
          context: [aws-build-write, boost-api-prod, slack-bot]
      - argocd/release:
          application: terraform-manager
          context: aws-build-deploy
          filters:
            branches:
              only: [main]
          requires: [test, build-push]

jobs:
  test:
    executor: default
    steps:
      - github-util/setup:
          aws-role-arn: AWS_ECR_ROLE_ARN
      - checkout
      - restore_cache:
          keys:
            - venv-0-{{ .Branch }}-{{ checksum "poetry.lock" }}
            - venv-0-{{ .Branch }}-
            - venv-0-main-
      - run:
          name: install poetry
          command: pip3 install "poetry<2.0.0"
      - run:
          command: make install
      - run:
          command: make lint
      - run:
          command: make test
      - slack/notify:
          <<: *defaults_slack
      - save_cache:
          # cache key:
          #  - venv-CACHE_BUST_INT-BRANCH_NAME-POETRY_CHECKSUM
          key: venv-0-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

  build-push:
    executor: default
    steps:
      - github-util/setup:
          aws-role-arn: AWS_ECR_ROLE_ARN
          aws-ecr-public-login: true
      - checkout
      - run:
          command: make docker.build
      - run:
          command: make docker.push
      - run:
          name: make docker.echo.tag
          command: |
            BOOST_IMAGE_NAME=$(make docker.echo.tag)
            echo "export BOOST_IMAGE_NAME=${BOOST_IMAGE_NAME}" | tee -a $BASH_ENV
      - run:
          name: make docker.echo.digest
          command: |
            BOOST_IMAGE_DIGEST=$(make docker.echo.digest)
            echo "export BOOST_IMAGE_DIGEST=${BOOST_IMAGE_DIGEST}" | tee -a $BASH_ENV
      - run:
          name: Setup Cosign Version and SHA
          command: |
            echo 'export COSIGN_VERSION="2.2.0" && export COSIGN_SHA="5e4791fb7a5efaaa98da651534789ec985ce8ac9c31910a810fc249f86ba2ef9"' | tee -a $BASH_ENV
      - run:
          name: install cosign
          command: |
            sudo wget -O /usr/bin/cosign "https://github.com/sigstore/cosign/releases/download/v${COSIGN_VERSION}/cosign-linux-amd64"
            shaCosign=$(sha256sum /usr/bin/cosign | cut -d' ' -f1);
            if [[ $shaCosign != ${COSIGN_SHA} ]]; then
              log_error "Unable to validate cosign digest'"
              exit 1
            fi
            sudo chmod +x /usr/bin/cosign
      - run:
          name: sign image
          command: |
            make docker.sign.key
            make docker.verify.sig
      - slack/notify:
          <<: *defaults_slack
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
          steps:
            - boost-security-scanner/scan:
                registry_module: boostsecurityio/trivy-image
            - boost-security-scanner/scan:
                registry_module: boostsecurityio/trivy-sbom-image
