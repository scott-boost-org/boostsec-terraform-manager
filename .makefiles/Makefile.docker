#
# Variables
#
DOCKER_REGISTRY ?= 289082777815.dkr.ecr.us-east-2.amazonaws.com
DOCKER_IMAGE    ?= ${PROJECT_NAME}
DOCKER_CONTEXT  ?= ${PROJECT_ROOT}
DOCKER_SIGNATURE_KEY ?= awskms:///arn:aws:kms:us-east-2:209299908473:key/mrk-a7bffc064aac41b185e30e6488792e0f
DIGEST_FILE = ./docker_digest.txt

ifneq ($(CI),)
  DOCKER_URL  ?= ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
  DOCKER_TAG  ?= $(shell echo ${CIRCLE_SHA1} | head -c 7)
else
  DOCKER_URL  ?= ${DOCKER_IMAGE}
  DOCKER_TAG  ?= devel
endif

#
# Additional Help
#
define HELP_PREFIX_DOCKER
	$(HELP_PREFIX)
	@printf "  \033[36m%-15s\033[0m %-35s %s\n" "DOCKER_URL" "docker image name" "${DOCKER_URL}"
	@printf "  \033[36m%-15s\033[0m %-35s %s\n" "DOCKER_TAG" "docker image tag" "${DOCKER_TAG}"
endef

HELP_PREFIX := $(HELP_PREFIX_DOCKER)

#
# Exports
#
export DOCKER_BUILDKIT ?= 1

#
# Targets
#
docker.build: ## Docker image build
docker.build: .phony
ifeq ($(GITHUB_TOKEN),)
	docker build --ssh default --tag ${DOCKER_URL}:${DOCKER_TAG} ${DOCKER_CONTEXT}
else
	docker build --secret id=GITHUB_TOKEN --ssh default --tag ${DOCKER_URL}:${DOCKER_TAG} ${DOCKER_CONTEXT}
endif

docker.echo.tag: ## Docker tag echoed to stdout
docker.echo.tag:
	@echo ${DOCKER_URL}:${DOCKER_TAG}

$(DIGEST_FILE): .phony
	@echo "$$(docker buildx imagetools inspect ${DOCKER_URL}:${DOCKER_TAG} --format '{{.Name}}@{{.Manifest.Digest}}')" > $(DIGEST_FILE)

docker.echo.digest: ## Docker image digest echoed to stdout. Only works after docker.build
docker.echo.digest: .phony $(DIGEST_FILE)
	@cat $(DIGEST_FILE)


docker.verify.sig:  ## Validate the docker image signature using cosign and the public key
docker.verify.sig:  .phony $(DIGEST_FILE)
	cosign verify --key ${DOCKER_SIGNATURE_KEY} $$(cat $(DIGEST_FILE))

docker.sign.key:  ## Signs the container image using the key
docker.sign.key:  .phony $(DIGEST_FILE)
	cosign sign -y --tlog-upload=true --recursive --key ${DOCKER_SIGNATURE_KEY} $$(cat $(DIGEST_FILE))

docker.sign.keyless:  ## Signs the container image using keyless mode
docker.sign.keyless:  .phony $(DIGEST_FILE)
	cosign sign --recursive $$(cat $(DIGEST_FILE))

docker.push:  ## Docker image push
docker.push:  .phony
	docker push ${DOCKER_URL}:${DOCKER_TAG}

docker.clean:  ## Remove the project's containers, all=true for all containers
ifeq ($(all),true)
docker.clean: filter = "label=BOOSTSEC=true"
else
docker.clean: filter = "name=terraform-manager-"
endif
docker.clean:  .phony
	container=$$(docker ps --filter $(filter) -q -a) \
	&& (test -z "$${container}" \
	|| (volumes=$$(docker inspect -f '{{range .Mounts}}{{.Name}} {{end}}' $${container}) || true \
	&& docker rm -f $${container} \
	&& (test -z "$${volumes}" || docker volume rm -f $${volumes})))
